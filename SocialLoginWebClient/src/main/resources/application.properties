spring.application.name=SocialLoginWebClient
spring.security.oauth2.client.registration.google.client-id = test
spring.security.oauth2.client.registration.google.client-secret = test
server.port = 8099


#spring.security.oauth2.client.registration.facebook.client-id =
#spring.security.oauth2.client.registration.facebook.client-secret =


#spring.security.oauth2.client.registration.github.client-id =
#spring.security.oauth2.client.registration.github.client-secret =


#spring.security.oauth2.client.registration.okta.client-id =
#spring.security.oauth2.client.registration.okta.client-secret =
#spring.security.oauth2.client.registration.okta.scope=openid,profile
#
#spring.security.oauth2.client.registration.okta.redirect-uri=http://localhost:8099/login/oauth2/code/okta
#spring.security.oauth2.client.provider.okta.issuer-uri=https://dev-149854.okta.com/oauth2/default

spring.security.oauth2.client.registration.mywebclient.client-id = photo-app-webclient
spring.security.oauth2.client.registration.mywebclient.client-secret = o1OtPAWNjMActhic1gsIWpbnFLQKVZs2
spring.security.oauth2.client.registration.mywebclient.scope = openid, profile, roles
spring.security.oauth2.client.registration.mywebclient.authorization-grant-type = authorization_code
spring.security.oauth2.client.registration.mywebclient.redirect-uri = http://localhost:8087/login/oauth2/code/mywebclient

spring.security.oauth2.client.provider.mywebclient.authorization-uri = http://localhost:8080/realms/appsdeveloperblog/protocol/openid-connect/auth
spring.security.oauth2.client.provider.mywebclient.token-uri = http://localhost:8080/realms/appsdeveloperblog/protocol/openid-connect/token
spring.security.oauth2.client.provider.mywebclient.jwk-set-uri=http://localhost:8080/realms/appsdeveloperblog/protocol/openid-connect/certs
spring.security.oauth2.client.provider.mywebclient.user-info-uri = http://localhost:8080/realms/appsdeveloperblog/protocol/openid-connect/userinfo
spring.security.oauth2.client.provider.mywebclient.user-name-attribute = preferred_username